struct __StubbingProxy_{{ token.name }}: Cuckoo.StubbingProxy {
    private let manager: Cuckoo.MockManager

    init(manager: Cuckoo.MockManager) {
        self.manager = manager
    }
    {% for property in token.properties %}
    var {{property.name}}: Cuckoo.ToBeStubbed{% if property.isReadOnly %}ReadOnly{%endif%}Property<{{property.type|genericSafe}}> {
        return .init(manager: manager, name: "{{property.name}}")
    }
    {% endfor %}
    {% for method in token.methods %}
    func {{method.name}}{{method.parameters|matchableGenericNames}}({{method.parameters|matchableParameterSignature}}) -> {{method.stubFunction}}<({{method.inputTypes|genericSafe}}){%if method.returnType != "Void" %}, {{method.returnType|genericSafe}}{%endif%}>{{method.parameters|matchableGenericWhere}} {
        {{method.parameters|parameterMatchers}}
        return .init(stub: manager.createStub("{{method.fullyQualifiedName}}", parameterMatchers: matchers))
    }
    {% endfor %}
}
